// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  role        String
  department  String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdTenders        Tender[]        @relation("TenderCreatedBy")
  createdPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderCreatedBy")
  approvedPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderApprovedBy")
  createdShipments     Shipment[]      @relation("ShipmentCreatedBy")
  createdInvoices      Invoice[]       @relation("InvoiceCreatedBy")
  approvedInvoices     Invoice[]       @relation("InvoiceApprovedBy")
  notifications        Notification[]

  @@map("users")
}

model Vendor {
  id                String   @id @default(cuid())
  name              String
  email             String
  phone             String
  address           String
  city              String
  state             String
  zipCode           String
  country           String
  registrationNumber String
  taxId             String
  status            VendorStatus @default(PENDING)
  rating            Float
  joinedDate        DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  primaryContact    VendorContact @relation("VendorPrimaryContact", fields: [primaryContactId], references: [id])
  primaryContactId  String @unique
  contacts          VendorContact[] @relation("VendorContacts")
  certifications    VendorCertification[]
  performanceMetrics VendorPerformanceMetrics?
  quotations        Quotation[]
  purchaseOrders    PurchaseOrder[]
  shipments         Shipment[]
  invoices          Invoice[]
  tenders           Tender[] @relation("TenderAwardedTo")

  @@map("vendors")
}

model VendorContact {
  id        String @id @default(cuid())
  name      String
  email     String
  phone     String
  position  String
  isPrimary Boolean @default(false)
  vendorId  String
  vendor    Vendor @relation("VendorContacts", fields: [vendorId], references: [id], onDelete: Cascade)
  primaryVendor Vendor? @relation("VendorPrimaryContact")

  @@map("vendor_contacts")
}

model VendorCertification {
  id          String   @id @default(cuid())
  name        String
  issuer      String
  issueDate   DateTime
  expiryDate  DateTime
  status      String
  documentUrl String?
  vendorId    String
  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_certifications")
}

model VendorPerformanceMetrics {
  id                    String  @id @default(cuid())
  onTimeDelivery        Float
  qualityScore          Float
  priceCompetitiveness    Float
  responsiveness        Float
  complianceScore       Float
  totalOrders           Int
  totalValue            Float
  averageOrderValue     Float
  vendorId              String  @unique
  vendor                Vendor  @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_performance_metrics")
}

model Tender {
  id                String   @id @default(cuid())
  title             String
  description       String
  category          String
  estimatedValue    Float
  currency          String   @default("USD")
  status            TenderStatus @default(DRAFT)
  publishedDate     DateTime?
  closingDate       DateTime?
  awardDate         DateTime?
  createdById       String
  createdBy         User     @relation("TenderCreatedBy", fields: [createdById], references: [id])
  awardedToId       String?
  awardedTo         Vendor?  @relation("TenderAwardedTo", fields: [awardedToId], references: [id])
  evaluationCriteria Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  items             TenderItem[]
  quotations        Quotation[]
  purchaseOrders    PurchaseOrder[]

  @@map("tenders")
}

model TenderItem {
  id                    String  @id @default(cuid())
  productName           String
  description           String
  quantity              Int
  unit                  String
  specifications        String
  estimatedUnitPrice    Float
  totalEstimatedPrice   Float
  tenderId              String
  tender                Tender  @relation(fields: [tenderId], references: [id], onDelete: Cascade)

  // Relations
  quotationItems        QuotationItem[]

  @@map("tender_items")
}

model Quotation {
  id              String   @id @default(cuid())
  tenderId        String
  tender          Tender   @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  submittedDate   DateTime
  status          QuotationStatus @default(SUBMITTED)
  totalAmount     Float
  currency        String   @default("USD")
  validityDays    Int
  paymentTerms    String
  deliveryTerms   String
  deliveryTime    Int
  notes           String?
  createdAt      DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  items           QuotationItem[]
  purchaseOrders  PurchaseOrder[]

  @@map("quotations")
}

model QuotationItem {
  id              String    @id @default(cuid())
  tenderItemId    String
  tenderItem      TenderItem @relation(fields: [tenderItemId], references: [id])
  quotationId     String
  quotation       Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  unitPrice       Float
  totalPrice      Float
  specifications  String
  notes           String?

  @@map("quotation_items")
}

model PurchaseOrder {
  id                    String   @id @default(cuid())
  poNumber              String   @unique
  vendorId              String
  vendor                Vendor   @relation(fields: [vendorId], references: [id])
  tenderId              String?
  tender                Tender?  @relation(fields: [tenderId], references: [id])
  quotationId           String?
  quotation             Quotation? @relation(fields: [quotationId], references: [id])
  status                PurchaseOrderStatus @default(DRAFT)
  subtotal              Float
  tax                   Float
  totalAmount           Float
  currency              String   @default("USD")
  taxRate               Float
  paymentTerms          String
  deliveryTerms         String
  expectedDeliveryDate  DateTime
  notes                 String?
  createdById           String
  createdBy             User     @relation("PurchaseOrderCreatedBy", fields: [createdById], references: [id])
  approvedById          String?
  approvedBy            User?    @relation("PurchaseOrderApprovedBy", fields: [approvedById], references: [id])
  approvedAt            DateTime?
  acknowledgedAt        DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  items                 PurchaseOrderItem[]
  shipments             Shipment[]
  invoices              Invoice[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  productName     String
  description     String
  quantity        Int
  unit            String
  unitPrice       Float
  totalPrice      Float
  specifications  String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  // Relations
  shipmentItems   ShipmentItem[]
  invoiceItems    InvoiceItem[]

  @@map("purchase_order_items")
}

model Shipment {
  id                    String   @id @default(cuid())
  shipmentNumber        String   @unique
  purchaseOrderId       String
  purchaseOrder         PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId              String
  vendor                Vendor   @relation(fields: [vendorId], references: [id])
  status                ShipmentStatus @default(CREATED)
  trackingNumber        String?
  carrier               String?
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?
  shippingAddress       Json
  createdById           String
  createdBy             User     @relation("ShipmentCreatedBy", fields: [createdById], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  items                 ShipmentItem[]

  @@map("shipments")
}

model ShipmentItem {
  id                    String   @id @default(cuid())
  purchaseOrderItemId   String
  purchaseOrderItem     PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])
  shipmentId            String
  shipment              Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  quantity              Int
  receivedQuantity      Int?
  condition             String

  @@map("shipment_items")
}

model Invoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  status          InvoiceStatus @default(PENDING_APPROVAL)
  subtotal        Float
  tax             Float
  totalAmount     Float
  currency        String   @default("USD")
  taxRate         Float
  dueDate         DateTime
  paidDate        DateTime?
  paymentMethod   String?
  reference       String
  createdById     String
  createdBy       User     @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  approvedById    String?
  approvedBy      User?    @relation("InvoiceApprovedBy", fields: [approvedById], references: [id])
  approvedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  items           InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id              String  @id @default(cuid())
  description     String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  taxRate         Float
  taxAmount       Float
  invoiceId       String
  invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  purchaseOrderItemId String?
  purchaseOrderItem PurchaseOrderItem? @relation(fields: [purchaseOrderItemId], references: [id])

  @@map("invoice_items")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  message     String
  type        NotificationType @default(INFO)
  isRead      Boolean  @default(false)
  actionUrl   String?
  createdAt   DateTime @default(now())

  @@map("notifications")
}

// Enums
enum VendorStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum TenderStatus {
  DRAFT
  PUBLISHED
  CLOSED
  AWARDED
  CANCELLED
}

enum QuotationStatus {
  SUBMITTED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ACKNOWLEDGED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ShipmentStatus {
  CREATED
  IN_TRANSIT
  DELIVERED
  RECEIVED
}

enum InvoiceStatus {
  PENDING_APPROVAL
  APPROVED
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
